

"use client";

import type { AnalysisResult, VulnerabilityFinding } from "@/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { AlertCircle, CheckCircle2, Database, FileText, FileWarning, Globe, Info, LockKeyhole, ServerIcon, ShieldAlert, ShieldCheck, ShieldOff, Sparkles, TriangleAlert, HelpCircle, LockIcon, ChevronDown, ListChecks, CloudIcon, BoxIcon, LibraryIcon, SearchCode, Network as NetworkIconLucide, Wifi } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip";
import { ScrollArea } from "@/components/ui/scroll-area"; 
import { cn } from "@/lib/utils";

type VulnerabilityReportDisplayProps = {
  result: AnalysisResult | null;
  isPremiumUser: boolean;
};

const renderMarkdownText = (text: string | undefined | null): JSX.Element | null => {
  if (!text) return null;
  
  const lines = text.split('\n');
  const elements: JSX.Element[] = [];
  let currentParagraphLines: string[] = [];
  let currentListItems: string[] = [];
  let inList = false;
  let listType: 'ul' | 'ol' = 'ul';
  let inCodeBlock = false;
  let codeBlockContent: string[] = [];
  let codeBlockLang = "";

  const formatLine = (lineContent: string) => {
    return lineContent
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/_(.*?)_/g, '<em>$1</em>')
        .replace(/`(.*?)`/g, '<code class="bg-muted text-foreground px-1 py-0.5 rounded text-xs font-mono border border-border">$1</code>')
        .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-primary hover:underline font-medium">$1</a>');
  };

  const flushParagraph = () => {
    if (currentParagraphLines.length > 0) {
      elements.push(
        <p key={`p-${elements.length}`} className="my-2.5 text-sm leading-relaxed text-foreground"
           dangerouslySetInnerHTML={{ __html: formatLine(currentParagraphLines.join('\n')) }}/>
      );
      currentParagraphLines = [];
    }
  };

  const flushList = () => {
    if (currentListItems.length > 0) {
      const ListTag = listType;
      elements.push(
        <ListTag key={`${listType}-${elements.length}`} className={cn("space-y-1.5 pl-6 my-2.5 text-sm text-foreground", ListTag === 'ul' ? 'list-disc' : 'list-decimal')}>
          {currentListItems.map((item, idx) => (
            <li key={`li-${elements.length}-${idx}`} dangerouslySetInnerHTML={{ __html: formatLine(item) }}>
            </li>
          ))}
        </ListTag>
      );
    }
    currentListItems = [];
    inList = false;
  };
  
  const flushCodeBlock = () => {
    if (codeBlockContent.length > 0) {
        elements.push(
            <pre key={`codeblock-${elements.length}`} className={cn("bg-muted p-3 rounded-md text-xs overflow-x-auto my-2.5 text-foreground border border-border font-mono", codeBlockLang && `language-${codeBlockLang}`)}>
            <code>{codeBlockContent.join('\n')}</code>
            </pre>
        );
        codeBlockContent = [];
        inCodeBlock = false;
        codeBlockLang = "";
    }
  };


  for (let i = 0; i < lines.length; i++) {
    let line = lines[i];

    if (line.startsWith('```')) {
        if (inCodeBlock) {
            flushCodeBlock();
        } else {
            flushParagraph(); flushList();
            inCodeBlock = true;
            codeBlockLang = line.substring(3).trim();
        }
        continue;
    }

    if (inCodeBlock) {
        codeBlockContent.push(line);
        continue;
    }


    if (line.startsWith('# ')) {
      flushParagraph(); flushList();
      elements.push(<h1 key={`h1-${i}`} className="text-2xl font-bold mt-6 mb-3 pb-2 border-b border-border text-foreground" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(2)) }}/>);
    } else if (line.startsWith('## ')) {
      flushParagraph(); flushList();
      elements.push(<h2 key={`h2-${i}`} className="text-xl font-semibold mt-5 mb-2.5 pb-1 border-b border-border text-foreground" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(3)) }}/>);
    } else if (line.startsWith('### ')) {
      flushParagraph(); flushList();
      elements.push(<h3 key={`h3-${i}`} className="text-lg font-semibold mt-4 mb-1.5 text-foreground" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(4)) }}/>);
    } else if (line.startsWith('#### ')) {
      flushParagraph(); flushList();
      elements.push(<h4 key={`h4-${i}`} className="text-base font-semibold mt-3 mb-1 text-foreground" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(5)) }}/>);
    } else if (line.match(/^(\*|-|\+)\s/)) { // Unordered list
      flushParagraph(); 
      if (!inList || listType !== 'ul') {
        flushList(); // Flush if changing list type or starting new list
        inList = true; 
        listType = 'ul';
      }
      currentListItems.push(line.replace(/^(\*|-|\+)\s/, '')); 
    } else if (line.match(/^\d+\.\s/)) { // Ordered list
      flushParagraph();
      if (!inList || listType !== 'ol') {
        flushList(); // Flush if changing list type or starting new list
        inList = true;
        listType = 'ol';
      }
      currentListItems.push(line.replace(/^\d+\.\s/, ''));
    } else if (line.trim() === '') { 
      flushParagraph(); flushList(); 
    } else { 
      if (inList) flushList(); 
      currentParagraphLines.push(line);
    }
  }
  flushParagraph(); flushList(); flushCodeBlock();
  return <div className="prose dark:prose-invert max-w-none">{elements}</div>;
};


const renderMarkdownReport = (markdownText: string | null, isPremium: boolean, forTruncation = false): JSX.Element | null => {
  if (!markdownText) return null;

  let textToRender = markdownText;
  const premiumMessage = "\n\n---\n\n### <div class='flex items-center gap-2 text-accent'><svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-sparkles'><path d='m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z'/><path d='M5 3v4'/><path d='M19 17v4'/><path d='M3 5h4'/><path d='M17 19h4'/></svg><span>Acceso Premium Requerido</span></div>\n\n_Para visualizar el informe técnico completo, incluyendo todos los detalles de cada hallazgo, CVSS, impacto, evidencia, escenarios de ataque y playbooks de remediación, por favor active el **Modo Premium** (simulado a través del botón en el encabezado)._\n\n_[...]_";
  
  if (!isPremium && forTruncation) {
      const detailStartMarkers = [
        "Detailed Findings and Analysis", 
        "Prioritized Recommendations",
        "Análisis Detallado de Hallazgos", 
        "Recomendaciones Priorizadas",
        "Compliance Considerations",
        "Consideraciones de Cumplimiento",
        "Key URL Vulnerable Findings", 
        "Key Server Vulnerable Findings",
        "Key Database Vulnerable Findings",
        "Key SAST Vulnerable Findings",
        "Key DAST Vulnerable Findings",
        "Key Cloud Vulnerable Findings",
        "Key Container Vulnerable Findings",
        "Key Vulnerable Dependencies",
        "Key Network Vulnerable Findings"
      ];
      
      let cutOffIndex = -1;
      let firstSummaryMarkerIndex = -1;

      const overallSummaryEndMarker = "Detailed Findings and Analysis"; 
      const overallSummaryEndIndex = markdownText.toLowerCase().indexOf(overallSummaryEndMarker.toLowerCase());


      for (const marker of detailStartMarkers) {
          const markerIndex = markdownText.toLowerCase().indexOf(marker.toLowerCase());
          if (markerIndex !== -1) {
              if (firstSummaryMarkerIndex === -1 || markerIndex < firstSummaryMarkerIndex) {
                  firstSummaryMarkerIndex = markerIndex;
              }
              if (overallSummaryEndIndex !== -1 && markerIndex > overallSummaryEndIndex) { 
                  if (cutOffIndex === -1 || markerIndex < cutOffIndex) {
                    cutOffIndex = markerIndex;
                  }
              } else if (overallSummaryEndIndex === -1) {  
                  if (cutOffIndex === -1 || markerIndex < cutOffIndex) {
                    cutOffIndex = markerIndex;
                  }
              }
          }
      }
      
      if (cutOffIndex !== -1) { 
          textToRender = markdownText.substring(0, cutOffIndex) + premiumMessage;
      } else if (firstSummaryMarkerIndex !== -1) { 
          let approxCharsAfterSummary = markdownText.substring(firstSummaryMarkerIndex).length > 500 ? 500 : markdownText.substring(firstSummaryMarkerIndex).length;
          
          let endOfFirstSummarySection = markdownText.substring(firstSummaryMarkerIndex, firstSummaryMarkerIndex + approxCharsAfterSummary).indexOf('\n\n## ');
          if (endOfFirstSummarySection === -1) endOfFirstSummarySection = markdownText.substring(firstSummaryMarkerIndex, firstSummaryMarkerIndex + approxCharsAfterSummary).lastIndexOf('\n\n');
          if (endOfFirstSummarySection === -1) endOfFirstSummarySection = markdownText.substring(firstSummaryMarkerIndex, firstSummaryMarkerIndex + approxCharsAfterSummary).lastIndexOf('\n');
          if (endOfFirstSummarySection === -1) endOfFirstSummarySection = approxCharsAfterSummary; 

          textToRender = markdownText.substring(0, firstSummaryMarkerIndex + endOfFirstSummarySection) + premiumMessage;

      } else { 
           const approxChars = markdownText.length > 800 ? 800 : markdownText.length;
           let lastNewLine = markdownText.substring(0, approxChars).lastIndexOf('\n\n');
           if (lastNewLine === -1) lastNewLine = markdownText.substring(0, approxChars).lastIndexOf('\n');
           if (lastNewLine === -1) lastNewLine = approxChars;
           textToRender = markdownText.substring(0, lastNewLine) + premiumMessage;
      }
  }
 return renderMarkdownText(textToRender); // Call the main renderer with the (potentially truncated) text
};


export function VulnerabilityReportDisplay({ result, isPremiumUser }: VulnerabilityReportDisplayProps) {
  if (!result) {
    return (
      <Card className="shadow-lg mt-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <Info className="h-6 w-6 text-primary" />
            Informe de Vulnerabilidades
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Aún no se ha realizado ningún análisis. Ingresa los detalles en el formulario para comenzar.
          </p>
        </CardContent>
      </Card>
    );
  }
  if (result.error && !result.reportText && (!result.allFindings || result.allFindings.length === 0 )) { 
    return (
      <Card className="shadow-lg mt-8 border-l-4 border-destructive">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl text-destructive">
            <TriangleAlert className="h-6 w-6" />
            Error en el Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-foreground">{result.error}</p>
          <p className="text-sm text-muted-foreground mt-2">
            No se pudieron generar los resultados del análisis. Por favor, verifica tu entrada o inténtalo más tarde.
          </p>
        </CardContent>
      </Card>
    );
  }
  
  const findings = result.allFindings || [];
  const hasVulnerableFindings = findings.some(v => v.isVulnerable);

  const getSeverityDetails = (severity: VulnerabilityFinding['severity']) => {
    switch (severity) {
      case 'Critical':
        return { icon: <ShieldAlert className="h-5 w-5 text-destructive" />, badge: <Badge variant="destructive" className="text-xs">Crítica</Badge>, tooltip: `Vulnerabilidad de riesgo crítico.`, rowClass: "bg-destructive/10 hover:bg-destructive/20 data-[state=open]:bg-destructive/20" };
      case 'High':
        return { icon: <ShieldAlert className="h-5 w-5 text-destructive" />, badge: <Badge variant="destructive" className="text-xs">Alta</Badge>, tooltip: `Vulnerabilidad de riesgo alto.`, rowClass: "bg-destructive/10 hover:bg-destructive/20 data-[state=open]:bg-destructive/20" };
      case 'Medium':
        return { icon: <AlertCircle className="h-5 w-5 text-orange-500" />, badge: <Badge variant="outline" className="border-orange-500 text-orange-500 text-xs">Media</Badge>, tooltip: "Vulnerabilidad de riesgo medio.", rowClass: "bg-orange-500/10 hover:bg-orange-500/20 data-[state=open]:bg-orange-500/20" };
      case 'Low':
        return { icon: <FileWarning className="h-5 w-5 text-yellow-600" />, badge: <Badge variant="outline" className="border-yellow-600 text-yellow-600 text-xs">Baja</Badge>, tooltip: "Vulnerabilidad de bajo riesgo.", rowClass: "bg-yellow-600/10 hover:bg-yellow-600/20 data-[state=open]:bg-yellow-600/20" };
      case 'Informational':
      default:
        return { icon: <Info className="h-5 w-5 text-blue-500" />, badge: <Badge variant="outline" className="border-blue-500 text-blue-500 text-xs">Info</Badge>, tooltip: "Hallazgo informativo.", rowClass: "bg-blue-500/10 hover:bg-blue-500/20 data-[state=open]:bg-blue-500/20" };
    }
  };
  
  const getSourceIcon = (source?: VulnerabilityFinding['source']) => {
    switch(source) {
        case "URL": return <Globe className="h-4 w-4 text-blue-600"/>;
        case "Server": return <ServerIcon className="h-4 w-4 text-green-600"/>;
        case "Database": return <Database className="h-4 w-4 text-purple-600"/>;
        case "SAST": return <SearchCode className="h-4 w-4 text-indigo-500" />;
        case "DAST": return <NetworkIconLucide className="h-4 w-4 text-pink-500" />;
        case "Cloud": return <CloudIcon className="h-4 w-4 text-sky-500" />;
        case "Container": return <BoxIcon className="h-4 w-4 text-teal-500" />;
        case "Dependency": return <LibraryIcon className="h-4 w-4 text-rose-500" />;
        case "Network": return <Wifi className="h-4 w-4 text-cyan-500" />;
        default: return <HelpCircle className="h-4 w-4 text-gray-500"/>;
    }
  };

  const renderIconWithTooltip = (icon: React.ReactNode, tooltipText: string, triggerClassName?: string) => (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild><span className={cn("inline-flex items-center justify-center", triggerClassName)}>{icon}</span></TooltipTrigger>
        <TooltipContent><p>{tooltipText}</p></TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
  
  const AccordionListHeader = () => (
    <div className="flex items-center p-3 border-b bg-muted/50 text-xs font-medium text-muted-foreground sticky top-0 z-10">
      <div className="w-[100px] shrink-0 flex items-center gap-1 px-1">Origen</div>
      <div className="flex-1 min-w-[150px] px-1 truncate">Categoría</div>
      <div className="flex-1 min-w-[200px] px-1 truncate">Descripción Breve</div>
      <div className="text-center w-[120px] shrink-0 px-1">Severidad</div>
      <div className="text-center w-[100px] shrink-0 px-1">Detectado</div>
      {isPremiumUser && findings.some(f => f.potentialForAccountLockout || f.source === "URL" || f.source === "DAST") && ( 
        <div className="text-center w-[100px] shrink-0 px-1">Riesgo Bloqueo</div>
      )}
      <div className="flex-1 min-w-[180px] px-1 truncate">Solución Sugerida</div>
      <div className="text-center w-[30px] shrink-0 px-1">
        <span className="sr-only">Detalles</span>
      </div>
    </div>
  );

  const PremiumLock = ({ featureName }: { featureName: string }) => (
    <TooltipProvider>
      <Tooltip>
          <TooltipTrigger asChild>
              <span className="flex items-center justify-center gap-1 cursor-help text-accent text-xs">
                  <LockIcon className="h-3 w-3"/> Premium
              </span>
          </TooltipTrigger>
          <TooltipContent>
              <p>Active Premium para ver {featureName}.</p>
          </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );


  return (
    <div className="mt-8 space-y-8">
      {result.reportText && (
        <Card className="shadow-2xl border-l-4 border-primary">
          <CardHeader>
            <CardTitle className="flex items-center gap-3 text-xl md:text-2xl">
              <FileText className="h-7 w-7 text-primary" />
              Informe de Seguridad Integral Generado por IA
            </CardTitle>
             <CardDescription>
              {isPremiumUser 
                ? "Análisis detallado de los componentes." 
                : "Resumen del análisis. Active el Modo Premium para el informe completo."}
            </CardDescription>
          </CardHeader>
          <CardContent>
             <ScrollArea className="h-auto max-h-[600px] w-full rounded-md border border-border p-4 bg-card shadow-inner">
                {renderMarkdownReport(result.reportText, isPremiumUser, true)}
             </ScrollArea>
          </CardContent>
        </Card>
      )}

      {result.error && !result.reportText && ( 
        <Card className="border-yellow-500 bg-yellow-500/10 shadow-sm">
          <CardHeader><CardTitle className="text-yellow-700 dark:text-yellow-400 flex items-center gap-2"><TriangleAlert />Aviso sobre el Análisis</CardTitle></CardHeader>
          <CardContent><p className="text-yellow-700 dark:text-yellow-500">{result.error}</p></CardContent>
        </Card>
      )}

      <Card className="shadow-2xl border-l-4 border-primary">
        <CardHeader>
          <CardTitle className="flex items-center gap-3 text-xl md:text-2xl">
            <ListChecks className="h-7 w-7 text-primary" />
            Hallazgos Detallados (Todas las Fuentes)
          </CardTitle>
          {!isPremiumUser && findings.length > 0 && (
            <CardDescription className="text-accent flex items-center gap-1">
              <Sparkles className="inline-block h-4 w-4" />
              Active el Modo Premium para ver todos los detalles técnicos, CVSS, impacto y evidencia de los hallazgos.
            </CardDescription>
          )}
          {isPremiumUser && findings.length === 0 && (
            <CardDescription>No se identificaron hallazgos específicos durante este escaneo.</CardDescription>
          )}
          {isPremiumUser && !hasVulnerableFindings && findings.length > 0 &&(
             <CardDescription>No se detectaron vulnerabilidades activas, aunque se listan algunos hallazgos informativos.</CardDescription>
          )}
          {isPremiumUser && hasVulnerableFindings && (
              <CardDescription>Se detectaron las siguientes vulnerabilidades y hallazgos. Prioriza la corrección según la severidad.</CardDescription>
          )}
        </CardHeader>
        {findings.length > 0 && (
          <CardContent className="p-0 md:p-6 md:pt-0"> 
            <ScrollArea className="max-h-[700px] overflow-y-auto border rounded-lg">
              <div className="sticky top-0 z-10 bg-card">
                 <AccordionListHeader />
              </div>
              <Accordion type="multiple" className="w-full">
                {findings.map((vuln, index) => {
                  const severityDetails = getSeverityDetails(vuln.severity);
                  const itemRowClass = vuln.isVulnerable ? severityDetails.rowClass : "bg-background/50 hover:bg-muted/50 data-[state=open]:bg-muted/50";
                  const showDetails = isPremiumUser || vuln.severity === "Informational";

                  return (
                    <AccordionItem value={`item-${index}`} key={index} className={cn("border-b last:border-b-0", itemRowClass)}>
                       <AccordionTrigger 
                        className={cn(
                            "flex w-full text-left p-3 items-center text-xs group", // Reduced padding and text size
                            "hover:bg-muted/60 focus:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-0",
                            itemRowClass 
                        )}
                        disabled={!showDetails}
                        >
                        <div className="font-medium w-[100px] shrink-0 flex items-center gap-1 px-1">
                          {renderIconWithTooltip(getSourceIcon(vuln.source), vuln.source || "Desconocido")}
                          <span className="truncate">{vuln.source}</span>
                        </div>
                        <div className="font-medium flex-1 min-w-[150px] px-1 truncate" title={vuln.vulnerability}>{vuln.vulnerability}</div>
                        <div className="text-muted-foreground flex-1 min-w-[200px] px-1 truncate" title={vuln.description}>{vuln.description}</div>
                        <div className="text-center w-[120px] shrink-0 px-1">
                          {renderIconWithTooltip(
                            <span className="flex items-center justify-center gap-1">{severityDetails.icon} {severityDetails.badge}</span>,
                          severityDetails.tooltip
                          )}
                        </div>
                        <div className="text-center w-[100px] shrink-0 px-1">
                          {vuln.isVulnerable ? 
                          renderIconWithTooltip(<CheckCircle2 className="h-5 w-5 text-green-600" />, "Vulnerable") : 
                          renderIconWithTooltip(<ShieldOff className="h-5 w-5 text-muted-foreground" />, "No Vulnerable / Informativo")
                          }
                        </div>
                        {isPremiumUser && findings.some(f => f.potentialForAccountLockout || f.source === "URL" || f.source === "DAST") && ( 
                            <div className="text-center w-[100px] shrink-0 px-1">
                            {vuln.potentialForAccountLockout ? 
                                renderIconWithTooltip(<LockKeyhole className="h-5 w-5 text-orange-500" />, "Sí, posible") : 
                                renderIconWithTooltip(<ShieldCheck className="h-5 w-5 text-green-600" />, "No Directo")
                            }
                            </div>
                        )}
                        <div className="text-muted-foreground flex-1 min-w-[180px] px-1 truncate">
                            {showDetails ? ( 
                                <span title={vuln.remediation}>{vuln.remediation}</span>
                            ) : (
                                <PremiumLock featureName="la remediación sugerida" />
                            )}
                        </div>
                        <div className="text-center w-[30px] shrink-0 flex justify-center items-center px-1">
                           {showDetails ? <ChevronDown className="h-4 w-4 text-muted-foreground transition-transform duration-200 group-data-[state=open]:rotate-180" /> : <LockIcon className="h-4 w-4 text-accent"/>}
                        </div>
                      </AccordionTrigger>
                      {showDetails && (
                        <AccordionContent className="p-0">
                            <div className={cn("p-4 space-y-3 text-xs border-t", itemRowClass ? `${itemRowClass.replace(/\/10$/, '/5').replace(/\/50$/, '/30')} bg-opacity-50` : 'bg-card')}> 
                                <div className="text-foreground"><strong className="font-semibold">Descripción Completa:</strong> {renderMarkdownText(vuln.description)}</div>
                                {vuln.cvssScore && <div><strong className="font-semibold text-foreground">Puntuación CVSS:</strong> {vuln.cvssScore}</div>}
                                {vuln.cvssVector && <div><strong className="font-semibold text-foreground">Vector CVSS:</strong> <code>{vuln.cvssVector}</code></div>}
                                
                                {isPremiumUser ? (
                                    <>
                                    {vuln.technicalDetails && <div><strong className="font-semibold text-foreground">Detalles Técnicos:</strong> {renderMarkdownText(vuln.technicalDetails)}</div>}
                                    {vuln.businessImpact && <div><strong className="font-semibold text-foreground">Impacto en el Negocio:</strong> {renderMarkdownText(vuln.businessImpact)}</div>}
                                    {vuln.evidence && <div><strong className="font-semibold text-foreground">Evidencia:</strong> <pre className="whitespace-pre-wrap bg-muted p-2 rounded-md border border-border text-foreground text-xs">{vuln.evidence}</pre></div>}
                                    </>
                                ) : (
                                    <div className="my-2 p-3 bg-accent/10 border border-accent/30 rounded-md">
                                        <p className="text-accent text-xs font-medium flex items-center gap-2"><Sparkles className="h-4 w-4" /> Active Premium para ver Detalles Técnicos, Impacto en el Negocio y Evidencia.</p>
                                    </div>
                                )}
                                
                                {vuln.source === "SAST" && (
                                  <>
                                    {vuln.filePath && <div><strong className="font-semibold text-foreground">Ruta Archivo (SAST):</strong> {vuln.filePath}</div>}
                                    {vuln.lineNumber && <div><strong className="font-semibold text-foreground">Nº Línea (SAST):</strong> {vuln.lineNumber}</div>}
                                    {showDetails && vuln.codeSnippetContext && <div><strong className="font-semibold text-foreground">Contexto Código (SAST):</strong> <pre className="whitespace-pre-wrap bg-muted p-2 rounded-md border border-border text-foreground font-mono text-xs">{vuln.codeSnippetContext}</pre></div>}
                                    {showDetails && vuln.suggestedFix && <div><strong className="font-semibold text-foreground">Sugerencia de Corrección (SAST):</strong> <pre className="whitespace-pre-wrap bg-green-600/10 p-2 rounded-md border border-green-600/30 text-foreground font-mono text-xs">{vuln.suggestedFix}</pre></div>}
                                    {!showDetails && (vuln.codeSnippetContext || vuln.suggestedFix) && <PremiumLock featureName="el contexto del código y la sugerencia de corrección" />}
                                  </>
                                )}

                                {vuln.source === "DAST" && showDetails && (
                                  <>
                                    {vuln.affectedParameter && <div><strong className="font-semibold text-foreground">Parámetro Afectado (DAST):</strong> {vuln.affectedParameter}</div>}
                                    {vuln.requestExample && <div><strong className="font-semibold text-foreground">Ej. Petición (DAST):</strong> <pre className="whitespace-pre-wrap bg-muted p-2 rounded-md border border-border text-foreground text-xs">{vuln.requestExample}</pre></div>}
                                    {vuln.responseExample && <div><strong className="font-semibold text-foreground">Ej. Respuesta (DAST):</strong> <pre className="whitespace-pre-wrap bg-muted p-2 rounded-md border border-border text-foreground text-xs">{vuln.responseExample}</pre></div>}
                                  </>
                                )}
                                 {vuln.source === "DAST" && !showDetails && (vuln.affectedParameter || vuln.requestExample || vuln.responseExample) && <PremiumLock featureName="los detalles específicos de DAST" />}
                                
                                {vuln.source === "Cloud" && showDetails && (
                                  <>
                                    {vuln.cloudProvider && <div><strong className="font-semibold text-foreground">Proveedor Cloud:</strong> {vuln.cloudProvider}</div>}
                                    {vuln.affectedResource && <div><strong className="font-semibold text-foreground">Recurso Cloud Afectado:</strong> {vuln.affectedResource}</div>}
                                  </>
                                )}
                                 {vuln.source === "Cloud" && !showDetails && (vuln.cloudProvider || vuln.affectedResource) && <PremiumLock featureName="los detalles específicos de Cloud" />}


                                {vuln.source === "Container" && showDetails && (
                                  <>
                                     {vuln.imageName && <div><strong className="font-semibold text-foreground">Imagen Contenedor:</strong> {vuln.imageName}</div>}
                                  </>
                                )}
                                 {vuln.source === "Container" && !showDetails && vuln.imageName && <PremiumLock featureName="los detalles específicos del contenedor" />}


                                {vuln.source === "Dependency" && showDetails && (
                                  <>
                                    {vuln.dependencyName && <div><strong className="font-semibold text-foreground">Dependencia Afectada:</strong> {vuln.dependencyName}</div>}
                                    {vuln.dependencyVersion && <div><strong className="font-semibold text-foreground">Versión Dependencia:</strong> {vuln.dependencyVersion}</div>}
                                  </>
                                )}
                                 {vuln.source === "Dependency" && !showDetails && (vuln.dependencyName || vuln.dependencyVersion) && <PremiumLock featureName="los detalles específicos de la dependencia" />}


                                {vuln.source === "Network" && showDetails && (
                                  <>
                                    {vuln.affectedPort && <div><strong className="font-semibold text-foreground">Puerto Afectado (Red):</strong> {vuln.affectedPort}</div>}
                                    {vuln.affectedProtocol && <div><strong className="font-semibold text-foreground">Protocolo (Red):</strong> {vuln.affectedProtocol}</div>}
                                  </>
                                )}
                                {vuln.source === "Network" && !showDetails && (vuln.affectedPort || vuln.affectedProtocol) && <PremiumLock featureName="los detalles específicos de red" />}
                                
                            </div>
                        </AccordionContent>
                       )}
                    </AccordionItem>
                  );
                })}
              </Accordion>
            </ScrollArea>
          </CardContent>
        )}
        {!isPremiumUser && findings.length > 0 && (
            <CardContent className="text-center py-8">
                <Sparkles className="h-12 w-12 text-accent mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2 text-foreground">Acceso Premium Requerido</h3>
                <p className="text-muted-foreground mb-4 text-sm">
                    Para ver la tabla detallada de todos los hallazgos técnicos, CVSS, impacto, evidencia y sus remediaciones, active el Modo Premium.
                </p>
                 <p className="text-xs text-muted-foreground">Los hallazgos informativos y sus descripciones se muestran siempre como cortesía.</p>
            </CardContent>
        )}
      </Card>
    </div>
  );
}
    


